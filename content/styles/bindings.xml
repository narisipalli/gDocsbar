<?xml version="1.0"?>
<!DOCTYPE window [
]>

<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	xmlns:html="http://www.w3.org/1999/xhtml">

<binding id="treeEditable" extends="chrome://global/content/bindings/tree.xml#tree">
	<content>
	      <children/>
	      <xul:treerows class="tree-container-treerows" xbl:inherits="dragover,dragdroptree">
	        <children includes="treehead|treechildren"/>
	      </xul:treerows>
	</content>
</binding>
<binding id="gdfoldertreeitem" extends="chrome://global/content/bindings/tree.xml#tree-base">
  <content>
  	<children />
  </content>
  <implementation>
    <method name="toggleOpenState">
      <body>
        <![CDATA[
          if ((this.getAttribute('container') == 'true') &&
               (this.getAttribute('empty') != 'true')) {
             if (this.getAttribute('open') == 'true')
               this.removeAttribute('open');
             else this.setAttribute('open', 'true');
          }
        ]]>
      </body>
    </method>
   <method name="open">
     <body>
        <![CDATA[
          if ((this.getAttribute('container') == 'true') &&
               (this.getAttribute('empty') != 'true')) {
             if (this.getAttribute('open') != 'true')
               this.setAttribute('open', 'true');
          }
        ]]>
      </body>
   </method>
   <method name="close">
     <body>
        <![CDATA[
          if ((this.getAttribute('container') == 'true') &&
               (this.getAttribute('empty') != 'true')) {
             if (this.getAttribute('open') == 'true')
               this.removeAttribute('open');
          }
        ]]>
      </body>
   </method>
 </implementation>
</binding>

<binding id="extendedrichlistbox" extends="chrome://global/content/bindings/richlistbox.xml#richlistbox">
	<content>
		<xul:vbox flex="1">
		      <children includes="listheader"/>
		      <xul:scrollbox allowevents="true" orient="vertical" anonid="main-box" flex="1" style="overflow: auto;">
		        <children/>
		      </xul:scrollbox>
		</xul:vbox>
	  </content>
</binding>

<binding id="gdupdocument" extends="chrome://global/content/bindings/richlistbox.xml#richlistitem">
	<content>
		<xul:hbox flex="1" style="padding:5px 0;">
			<xul:label xbl:inherits="value=title" style="font-size:10pt; margin:0;" maxwidth="150" crop="center" /><xul:spacer flex="1" /><xul:gicon class="success" /><xul:gicon class="error" />
		</xul:hbox>
		<xul:hbox style="padding:5px 0;" class="uploading">
			<xul:progressmeter id="identifier" mode="determined" value="0" flex="1" anonid="progressbar"/><xul:gicon class="loading" />
		</xul:hbox>
		<xul:description class="error" xbl:inherits="xbl:text=errortxt" style="color:red;"></xul:description>
	</content>
	<implementation>
		<constructor>
			<![CDATA[
				this.progressbar = document.getAnonymousElementByAttribute(this, "anonid", "progressbar");
			]]>
		</constructor>
		<method name="setFile">
			<parameter name="fileObj" />
			<body>
				<![CDATA[
					this.file = fileObj;
				]]>
			</body>
		</method>
		<method name="upload">
			<body>
				<![CDATA[
					file = this.file;
					  var ios = Components.classes["@mozilla.org/network/io-service;1"].getService(Components.interfaces.nsIIOService);
				      var fileURI = ios.newFileURI(file);

				      const MULTI = "@mozilla.org/io/multiplex-input-stream;1";
				      const FINPUT = "@mozilla.org/network/file-input-stream;1";
				      const STRINGIS = "@mozilla.org/io/string-input-stream;1";
				      const BUFFERED = "@mozilla.org/network/buffered-input-stream;1";
				      const nsIMultiplexInputStream = Components.interfaces.nsIMultiplexInputStream;
				      const nsIFileInputStream = Components.interfaces.nsIFileInputStream;
				      const nsIStringInputStream = Components.interfaces.nsIStringInputStream;
				      const nsIBufferedInputStream = Components.interfaces.nsIBufferedInputStream;

				      mis = Components.classes[MULTI].createInstance(nsIMultiplexInputStream);
				      var fin = Components.classes[FINPUT].createInstance(nsIFileInputStream);
				      fin.init(file, 1, 292, null);

				      var buf = Components.classes[BUFFERED].createInstance(nsIBufferedInputStream);
				      buf.init(fin, (file.fileSize - 1));
				      mis.appendStream(buf);
				      debug(buf);
				      var mimetype = gdMime.getMIMEType(file);
				
					  if(this.hasAttribute('folder')){
							folder = this.getAttribute('folder');
							url = gdListAPI._host + gdListAPI.folderURL + folder;
					   }
					else
						url = gdListAPI._host + gdListAPI.listURL;
						
				      mr = gdListAPI.setupRequest(url, {alt: "json"}, "POST", true, this.uploadSuccess.bind(this),this.uploadFail.bind(this), {"Content-Type": gdMime.getMIMEType(file),"Content-Length":mis.available()-2,"Slug":file.leafName });
				      
					  debug("starting with...."+ mis.available());
					 this.mis = mis;
					 
					 this.totalBytes = mis.available();
					
					 this.interval = setInterval((function(){
							this.updateProgress()
					 }).bind(this), 500);
					
					mr.send(mis);
				]]>
			</body>
		</method>
		<method name="uploadSuccess">
			<parameter name="data" />
			<body>
				<![CDATA[
					debug("upload success"); 
					clearInterval(this.interval);
					this.setAttribute('status','success');
					
					gdlistholder = document.getElementById("gdlistholder");
					
					if((this.getAttribute('folder') && gdlistholder.getAttribute('folder')) || (!this.hasAttribute('folder') && !gdlistholder.hasAttribute('folder'))){
						
						
						feedtype = gbar.$("feedtype");
			            showtypes = gbar.$("showtypes");
						
						if(showtypes.value){
							showtype = showtypes.value;
							if(entry.type != showtype)
								return;
						}
						if(feedtype.value){
							feedtype = feedtype.value
							if(!entry[feedtype])
								return false;
						}
						
						entry = new gdEntry(data.entry);
						newel = gbar.makegdocument(entry);
						gdlistholder.insertBefore(newel, gdlistholder.firstChild);
						//gdlistholder.removeChild(gdlistholder.lastChild);
					}
					
					
				]]>
			</body>
		</method>
		<method name="uploadFail">
			<parameter name="code" />
			<parameter name="error" />
			<body>
				<![CDATA[
					clearInterval(this.interval);
					this.setAttribute('status','error');
					this.setAttribute('errortxt',error);
				]]>
			</body>
		</method>
		<method name="updateProgress">
			<body>
				<![CDATA[
					var uploaded = this.totalBytes - this.mis.available();
					p = parseInt( uploaded * 100 / this.totalBytes );
					this.progressbar.value = (p == 100 ? 97 : p);
				]]>
			</body>
		</method>
	</implementation>
</binding>

<binding id="document" extends="xul:vbox">
	<content>
		<xul:hbox style="overflow-x:hidden;" mode="displayandedit">
			<xul:description xbl:inherits="xbl:text=name, tooltiptext=name" class="name"/>
		</xul:hbox>
		<html:div mode="display" class="folders" anonid="folders" collapsed="true">
		</html:div>
		<xul:vbox flex="1" mode="display">
			<xul:label crop="end" xbl:inherits="value=author, tooltiptext=author" class="date" style="margin-left:25px;"/>
			<xul:hbox align="center" style="margin-top:5px;" mode="display" flex="1">
				<xul:checkbox /><xul:gicon xbl:inherits="class=star" onclick="star();"/><xul:label xbl:inherits="value=datetime" class="date" /><xul:spacer flex="1" /><xul:gicon class="options" popup="gdocumentmenu" xbl:inherits="resource" tooltiptext="Actions"/><xul:gicon class="more" tooltiptext="More information"/>
			</xul:hbox>
		</xul:vbox>
		<xul:vbox mode="edit" style="margin-left:0px;">
			<xul:textbox xbl:inherits="value=name" anonid="name_textbox"/>
			<xul:hbox align="center">
				<xul:button label="save" oncommand="saveName();"/><xul:label class="text-link" value="cancel" onclick="cancelRename();" />
			</xul:hbox>
		</xul:vbox>
	</content>
	<implementation>
		<constructor>
			<![CDATA[
				
			]]>
		</constructor>
		<method name="rename">
			<body>
				<![CDATA[
					gbar.addClass(this, "edit");
					name = document.getAnonymousElementByAttribute(this, "anonid", "name_textbox");
					name.select();
					name.focus();
				]]>
			</body>
		</method>
		<method name="cancelRename">
			<body>
				<![CDATA[
					gbar.removeClass(this, "edit");
				]]>
			</body>
		</method>
		<method name="saveName">
			<body>
				<![CDATA[
          			gbar.addClass(this, "loading");
					this.newTitle = document.getAnonymousElementByAttribute(this, "anonid", "name_textbox").value;
          			gdListAPI.rename(this,document.getAnonymousElementByAttribute(this, "anonid", "name_textbox").value);
				]]>
			</body>
		</method>
		<method name="nameSavedError">
			<body>
				<![CDATA[
				gbar.removeClass(this, "loading");
				]]>
			</body>
		</method>
		<method name="nameSaved">
			<parameter name="data" />
			<body>
				<![CDATA[
					if(data){
						gbar.removeClass(this, "edit");
						gbar.removeClass(this, "loading");
						debug(data);
						entry = new gdEntry(data.entry);
						newel = gbar.makegdocument(entry);
						this.parentNode.replaceChild(newel, this);
					}
				]]>
			</body>
		</method>
		<method name="deleted">
			<parameter name="data" />
			<body>
				<![CDATA[
						gbar.removeClass(this, "loading");
						gbar.addClass(this, "deleted");
				]]>
			</body>
		</method>
		<method name="star">
			<body>
				<![CDATA[
					gbar.addClass(this, "loading");
					switch(this.getAttribute('star')){
						case "star":
						gdListAPI.unstar(this);
						break;
						
						case "nostar":
						gdListAPI.star(this);
						break;
					}
				]]>
			</body>
		</method>
		<method name="delete">
			<body>
				<![CDATA[
					gbar.addClass(this, "loading");
          			gdListAPI.delete(this);
				]]>
			</body>
		</method>
		<method name="hide">
			<body>
				<![CDATA[
					gbar.addClass(this, "loading");
          			gdListAPI.hide(this);
				]]>
			</body>
		</method>
		<method name="download">
			<parameter name="format" />
			<body>
				<![CDATA[
          gdListAPI.download(this,format);
				]]>
			</body>
		</method>
		<method name="preview">
			<body>
        <![CDATA[
          gdBrowser.preview(this);
				]]>
			</body>
		</method>
		<method name="move">
			<parameter name="folder" />
			<body>
        <![CDATA[
          gdListAPI.move(this, folder);
				]]>
			</body>
		</method>
	</implementation>
</binding>	

<binding id="gicon" extends="xul:label"/>

<binding id="gfolder" extends="xul:hbox">
	<content>
		<xul:gicon class="folder" /><xul:label xbl:inherits="value=title" />
	</content>
</binding>


<binding id="moreloader">
	<content>
		<xul:stack anonid="stack">
			<xul:label xbl:inherits="value=label" style="padding:1px 1px 0 0; color:#FFF;" />
			<xul:label xbl:inherits="value=label" style="color:#666;"/>
		</xul:stack>
		<xul:stack anonid="loading">
			<xul:label value="loading..." style="padding:1px 1px 0 0; color:#FFF;" />
			<xul:label value="loading..." style="color:#666;"/>
		</xul:stack>
	</content>
</binding>


<binding id="gdlistholder" extends="xul:vbox">
	<content>
		<xul:hbox style="background-color:#EFEFEF;font-size:7pt;" class="listdetail"><xul:hbox class="nonemptytext"><xul:label value="1"/><xul:label value="-" /><xul:label xbl:inherits="value=numshowing" /><xul:label value="of" /><xul:label xbl:inherits="value=total" /></xul:hbox><xul:label value="0 Files found" class="emptytext"></xul:label><xul:spacer flex="1" /><xul:gicon class="refresh" onclick="gbar.refreshDocumentFeed();" /></xul:hbox>
		<xul:vbox flex="1" style="overflow:auto;">
			<xul:vbox anonid="childrenholder">
				<children />
			</xul:vbox>
			<xul:moreloader xbl:inherits="step, startindex, total, class" anonid="moreloader" onclick="gbar.getMoreDocuments();"/>
		</xul:vbox>
		
	</content>
	<implementation>
		<method name="clearContents">
			<body>
				<![CDATA[
					childrenholder = document.getAnonymousElementByAttribute(this, "anonid", "childrenholder");
					while(this.childNodes.length > 0){
						this.removeChild(this.firstChild);
					}
					this.moreloader.setAttribute('collapsed', false);
					this.moreloader.setAttribute("label", "");
				]]>
			</body>
		</method>
		<constructor>
			<![CDATA[
				this.moreloader = document.getAnonymousElementByAttribute(this, "anonid", "moreloader");
			]]>
		</constructor>
		<property name="startindex">
			<setter>
				<![CDATA[
					
					this.si = parseInt(val);
					
					this.step = parseInt(this.getAttribute("step"));
					this.total = parseInt(this.getAttribute("total"));
					this.si = parseInt(this.getAttribute("startindex"));

						debug((this.total - (this.si + this.step - 1) ) +"<="+ this.step);
						if(isNaN(this.total)){
							this.moreloader.setAttribute('collapsed', true);
						}
						else if(this.step >= this.total){
							this.setAttribute("numshowing", this.total)	;
							this.moreloader.setAttribute('collapsed', true);
						}
						else if(this.si == this.total){
							this.setAttribute("numshowing", this.total)	;
							this.moreloader.setAttribute('collapsed', true);
						}
						else if(this.total - (this.si + this.step - 1) <= 0){
							this.setAttribute("numshowing", this.total)	;
							this.moreloader.setAttribute('collapsed', true);
							
						}
						else if(this.total - (this.si + this.step - 1) <= this.step){
							this.moreloader.setAttribute("label", "load last "+(this.total - (this.si + this.step - 1))+".");
							this.setAttribute("numshowing", (this.si + this.step - 1))	;
							this.moreloader.setAttribute('collapsed', false);
						}
						else{
							this.moreloader.setAttribute("label", "load "+this.step+" more...");
							this.setAttribute("numshowing", this.si + this.step -1);
							this.moreloader.setAttribute('collapsed', false);
						}
						
					debug("setter");
				]]>
			</setter>
		</property>
	</implementation>
</binding>

<binding id="gdsearch">
	<content>
		<xul:vbox flex="1">
			<xul:hbox flex="1">
				<xul:textbox flex="1" anonid="query" emptytext="Search documents" type="search" oncommand="gbar.getFullDocList();" searchbutton="true"/><xul:gicon class="search"  onclick="gbar.getFullDocList();"/>
			</xul:hbox>
			<xul:hbox pack="center">
				<xul:checkbox label="Title" anonid="title"  oncommand="titleoptions(this);"/>
				<xul:radiogroup orient="horizontal" anonid="title-exact" collapsed="true">
				  <xul:radio label="Exact" value="true"/>
				  <xul:radio label="Like"  value="false" selected="true"/>
				</xul:radiogroup>
			</xul:hbox>
		</xul:vbox>
	</content>
	<implementation>
		<method name="getQueryParams">
			<body>
				<![CDATA[
					var b = {};
					b.queryText = document.getAnonymousElementByAttribute(this, "anonid", "query").value;
					b.title = document.getAnonymousElementByAttribute(this, "anonid", "title").hasAttribute("checked");
					b["title-exact"] = document.getAnonymousElementByAttribute(this, "anonid", "title-exact").value;
					return b;
				]]>
			</body>
		</method>
		<method name="titleoptions">
			<parameter name="obj" />
			<body>
				<![CDATA[
					titleexact = document.getAnonymousElementByAttribute(this, "anonid", "title-exact");
					if(obj.hasAttribute("checked")){
						titleexact.setAttribute('collapsed', false);
					}
					else{
						titleexact.setAttribute('collapsed', true);
					}
				]]>
			</body>
		</method>
	</implementation>
</binding>


</bindings>
